
/*  CKJ 5-10-15
    This sketch uses an 8-bit shift register, part number SN74HC595 from
    Texas Instruments.  It allows the control of up to 8 LEDs with just 3 pins
    on the Arduino.  Building on v2, this v4 exercise now drives TWO 7-segment
    numeric displays, part number 276-0075 from Radio Shack.  Skipped v3
    because it was a special version using bitRead; probably harder to upgrade
    to 2 shift registers.

    After chasing a bug for a long time (see clearArray below), the program works
    as intended.  It cycles from 0 to 99.
       
    */

int SRCLK_Pin = 4;  // pin 11 on the 75HC595 (Serial Clock, or shift pin)
// When this pin is pulled high, it will shift the register.
int SER_Pin = 8;     // pin 14 on the 75HC595 (Serial Pin or data pin)
// Input for the next pin that gets shifted in.
int RCLK_Pin = 6;    // pin 12 on the 75HC595 (Register Clock or latch pin)
// Needs to be pulled high to set the output to the new shift register values.
// This must be pulled high directly after SRCLK has gone LOW again.  (true?)


/* Multiple shift registers can be daisy-chained;
    they act as a single register, releasing all 
    their data together, still with the same 3 Arduino
    pins.  This v4 sketch tries to implement this.
    Pin 9 (QH-prime) on the first chip is connected to
    pin 14 (SER) of the second chip.  The shift and latch
    pins are connected together.
*/
   
// the next two lines used to be:
// #define number_of_74hc595s 1 
// #define numOfRegisterPins number_of_74hc595s * 8
const int registerQty = 2;
const int pinsQty = registerQty * 8;

// define an array to contain the LED states (on or off)
boolean registers[pinsQty];


// As shown with Shift Test v01, registers[0] through [7]
// control the first digit and [8] through [15] control
// the second digit.  In other words, the data bits pass
// or shift directly through the first chip and are used by the
// second chip.


// Function 1 of 2 needed: set all register pin values to LOW
void clearArray() {
  for(int b = pinsQty - 1; b >= 0; b--) {
     registers[b] = LOW;
  }
} 

// This program would display the second (tens) numeral correctly
// only after changing the counter from "i" to "b".  Strange bug,
// since i is often used multiple times as a counter among various
// functions without a problem.


// Function 2 of 2 needed: load and display registers
// call this only AFTER all values have been set
void writeRegisters() {

  digitalWrite(RCLK_Pin, LOW);      // tell the 75HC595 to begin reading

  for(int i = pinsQty - 1; i >=  0; i--) {
    digitalWrite(SRCLK_Pin, LOW);   // here comes data for the next LED
    int val = registers[i];         // load an array value (1 bit of data)
    digitalWrite(SER_Pin, val);     // send that value to the 75HC595
    digitalWrite(SRCLK_Pin, HIGH);  // end of data for that LED
  }

  digitalWrite(RCLK_Pin, HIGH);     // tell the 75HC595 to release all the data
                                    // (display all LED values or states)
}


// Note the segment states are loaded from high to low,
// from [15] to [0], since each bit is passed or shifted
// outward, essentially in FIFO order.  The first bit gets
// passed the furthest, in this case to pin QH of the second
// chip.

// Another way of looking at it... the 75HC595 chips are not looking
// at the index numbers of the array named "registers".  Can't see them
// anyway, the data bit just comes in as unlabeled "val".  But it was helpful
// to know or decide the array's organization, and to load the bits
// in the corresponding order.  Would have also worked for [15] to represent
// the top segment of the first digit, as long as the bits were loaded from
// low index number to high.

void setup() {
  pinMode(SRCLK_Pin, OUTPUT);        // clock pin
  pinMode(SER_Pin, OUTPUT);          // data pin
  pinMode(RCLK_Pin, OUTPUT);         // latch pin

// reset all register pins (all LEDs off)
  clearArray();
  writeRegisters();
  delay(1000);
}               


void loop() {

// set the desired LED states, displaying 0 through 99

// This is surely a crude way to display the two-digit
// numbers, but is easy to follow and it works.
// The function now takes two parameters, the first indicating
// which numeral is being assigned.  A "0" means the first
// or ones column, a "1" means the second or tens column.
// The second parameter is simply the digit to be displayed.
// For 10 through 99, the two digits are assigned separately.

for (int i=0; i <= 99; i++) {
  if (i <= 9) {
  assignValues(0,i);        // populate the designated array
 }
  else if (i <= 19) {
  assignValues(1,1);
  assignValues(0,i-10);
  }
  else if (i <= 29) {
  assignValues(1,2);
  assignValues(0,i-20);
  }
  else if (i <= 39) {
  assignValues(1,3);
  assignValues(0,i-30);
  }
  else if (i <= 49) {
  assignValues(1,4);
  assignValues(0,i-40);
  }
  else if (i <= 59) {
  assignValues(1,5);
  assignValues(0,i-50);
  }
  else if (i <= 69) {
  assignValues(1,6);
  assignValues(0,i-60);
  }
  else if (i <= 79) {
  assignValues(1,7);
  assignValues(0,i-70);
  }
  else if (i <= 89) {
  assignValues(1,8);
  assignValues(0,i-80);
  }
  else {
  assignValues(1,9);
  assignValues(0,i-90);
  }

  writeRegisters();        // display all the states!
  delay(500);
  clearArray();
  writeRegisters();
  delay(100);
  }
}


// digit is 1 for the left display (tens column)
// digit is 0 for the right display (ones column)
void assignValues(int digit, int num) {
int a = digit * 8;          // for ones column, a is still zero.
                            // for tens column, a becomes 8 which
                            // adds or bumps up to range 8 to 15.
if (num == 0) {
  registers[a+0] = HIGH;    // segment A (top)
  registers[a+1] = HIGH;    // B (next clockwise)
  registers[a+2] = HIGH;    // C
  registers[a+3] = HIGH;    // D
  registers[a+4] = HIGH;    // E
  registers[a+5] = HIGH;    // F
  registers[a+6] = LOW;     // G (middle)
 }
else if (num == 1) {
  registers[a+0] = LOW;     // segment A (top)
  registers[a+1] = HIGH;    // B (next clockwise)
  registers[a+2] = HIGH;    // C
  registers[a+3] = LOW;     // D
  registers[a+4] = LOW;     // E
  registers[a+5] = LOW;     // F
  registers[a+6] = LOW;     // G (middle)
 }
else if (num == 2) {
  registers[a+0] = HIGH;    // segment A (top)
  registers[a+1] = HIGH;    // B (next clockwise)
  registers[a+2] = LOW;     // C
  registers[a+3] = HIGH;    // D
  registers[a+4] = HIGH;    // E
  registers[a+5] = LOW;     // F
  registers[a+6] = HIGH;    // G (middle)
 }
else if (num == 3) {
  registers[a+0] = HIGH;    // segment A (top)
  registers[a+1] = HIGH;    // B (next clockwise)
  registers[a+2] = HIGH;    // C
  registers[a+3] = HIGH;    // D
  registers[a+4] = LOW;     // E
  registers[a+5] = LOW;     // F
  registers[a+6] = HIGH;    // G (middle)
 }
else if (num == 4) {
  registers[a+0] = LOW;     // segment A (top)
  registers[a+1] = HIGH;    // B (next clockwise)
  registers[a+2] = HIGH;    // C
  registers[a+3] = LOW;     // D
  registers[a+4] = LOW;     // E
  registers[a+5] = HIGH;    // F
  registers[a+6] = HIGH;    // G (middle)
 }
else if (num == 5) {
  registers[a+0] = HIGH;    // segment A (top)
  registers[a+1] = LOW;     // B (next clockwise)
  registers[a+2] = HIGH;    // C
  registers[a+3] = HIGH;    // D
  registers[a+4] = LOW;     // E
  registers[a+5] = HIGH;    // F
  registers[a+6] = HIGH;    // G (middle)
 }
else if (num == 6) {
  registers[a+0] = HIGH;    // segment A (top)
  registers[a+1] = LOW;     // B (next clockwise)
  registers[a+2] = HIGH;    // C
  registers[a+3] = HIGH;    // D
  registers[a+4] = HIGH;    // E
  registers[a+5] = HIGH;    // F
  registers[a+6] = HIGH;    // G (middle)
 }
else if (num == 7) {
  registers[a+0] = HIGH;    // segment A (top)
  registers[a+1] = HIGH;    // B (next clockwise)
  registers[a+2] = HIGH;    // C
  registers[a+3] = LOW;     // D
  registers[a+4] = LOW;     // E
  registers[a+5] = LOW;     // F
  registers[a+6] = LOW;     // G (middle)
 }
else if (num == 8) {
  registers[a+0] = HIGH;    // segment A (top)
  registers[a+1] = HIGH;    // B (next clockwise)
  registers[a+2] = HIGH;    // C
  registers[a+3] = HIGH;    // D
  registers[a+4] = HIGH;    // E
  registers[a+5] = HIGH;    // F
  registers[a+6] = HIGH;    // G (middle)
 }
else if (num == 9) {
  registers[a+0] = HIGH;    // segment A (top)
  registers[a+1] = HIGH;    // B (next clockwise)
  registers[a+2] = HIGH;    // C
  registers[a+3] = HIGH;    // D
  registers[a+4] = LOW;     // E
  registers[a+5] = HIGH;    // F
  registers[a+6] = HIGH;    // G (middle)
 }
else {
  registers[a+0] = LOW;     // segment A (top)
  registers[a+1] = LOW;     // B (next clockwise)
  registers[a+2] = LOW;     // C
  registers[a+3] = LOW;     // D
  registers[a+4] = LOW;     // E
  registers[a+5] = LOW;     // F
  registers[a+6] = LOW;     // G (middle)
 }
}
